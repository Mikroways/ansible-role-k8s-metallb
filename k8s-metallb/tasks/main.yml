---
# tasks file for k8s-metallb

- name: Create metallb namespace
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: metallb-system
        labels:
          app: metallb
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create service account for controller
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        namespace: metallb-system
        name: controller
        labels:
          app: metallb
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create service account for speaker
  k8s:
    state: present
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        namespace: metallb-system
        name: speaker
        labels:
          app: metallb
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create cluster role for controller
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: metallb-system:controller
        labels:
          app: metallb
      rules:
      - apiGroups: [""]
        resources: ["services"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: [""]
        resources: ["services/status"]
        verbs: ["update"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create", "patch"]
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create cluster role for spaeker
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: metallb-system:speaker
        labels:
          app: metallb
      rules:
      - apiGroups: [""]
        resources: ["services", "endpoints", "nodes"]
        verbs: ["get", "list", "watch"]
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create role config-watcher
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        namespace: metallb-system
        name: config-watcher
        labels:
          app: metallb
      rules:
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create"]
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create cluster role binding for controller
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: metallb-system:controller
        labels:
          app: metallb
      subjects:
      - kind: ServiceAccount
        name: controller
        namespace: metallb-system
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: metallb-system:controller
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create role cluster binding for speaker
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: metallb-system:speaker
        labels:
          app: metallb
      subjects:
      - kind: ServiceAccount
        name: speaker
        namespace: metallb-system
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: metallb-system:speaker
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create role binding for config-watcher
  k8s:
    state: present
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        namespace: metallb-system
        name: config-watcher
        labels:
          app: metallb
      subjects:
      - kind: ServiceAccount
        name: controller
      - kind: ServiceAccount
        name: speaker
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: config-watcher
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create configmap metallb
  k8s:
    definition:
      kind: ConfigMap
      metadata:
        namespace: metallb-system
        name: config
      data:
        config: |
          address-pools:
          - name: loadbalanced
            protocol: "{{ metallb.protocol }}"
            addresses:
            - "{{ metallb.ip_range }}"
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes

- name: create daemonset for speaker
  k8s:
    state: present
    definition:
      apiVersion: apps/v1beta2
      kind: DaemonSet
      metadata:
        namespace: metallb-system
        name: speaker
        labels:
          app: metallb
          component: speaker
      spec:
        selector:
          matchLabels:
            app: metallb
            component: speaker
        template:
          metadata:
            labels:
              app: metallb
              component: speaker
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "7472"
          spec:
            serviceAccountName: speaker
            terminationGracePeriodSeconds: 0
            hostNetwork: true
            containers:
            - name: speaker
              image: "metallb/speaker:{{ metallb.version }}"
              imagePullPolicy: IfNotPresent
              args:
              - --port=7472
              - --config=config
              env:
              - name: METALLB_NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              ports:
              - name: monitoring
                containerPort: 7472
              resources:
                limits:
                  cpu: "{{ metallb.limits.cpu }}"
                  memory: "{{ metallb.limits.memory }}"
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                  - all
                  add:
                  - net_raw
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes
    
- name: create deployment for controller
  k8s:
    state: present
    definition:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        namespace: metallb-system
        name: controller
        labels:
          app: metallb
          component: controller
      spec:
        revisionHistoryLimit: 3
        selector:
          matchLabels:
            app: metallb
            component: controller
        template:
          metadata:
            labels:
              app: metallb
              component: controller
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "7472"
          spec:
            serviceAccountName: controller
            terminationGracePeriodSeconds: 0
            securityContext:
              runAsNonRoot: true
              runAsUser: 65534 # nobody
            containers:
            - name: controller
              image: "metallb/controller:{{ metallb.version }}"
              imagePullPolicy: IfNotPresent
              args:
              - --port=7472
              - --config=config
              ports:
              - name: monitoring
                containerPort: 7472
              resources:
                limits:
                  cpu: "{{ metallb.limits.cpu }}"
                  memory: "{{ metallb.limits.memory }}"
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - all
                readOnlyRootFilesystem: true
  environment: "{{ k8s.env }}"
  become: yes
  run_once: yes