---
# tasks file for k8s-metallb

- name: Create metallb namespace
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: metallb-system
        labels:
          app: metallb

- name: create pod security policy
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: policy/v1beta1
      kind: PodSecurityPolicy
      metadata:
        labels:
          app: metallb
        name: speaker
        namespace: metallb-system
      spec:
        allowPrivilegeEscalation: false
        allowedCapabilities:
        - NET_ADMIN
        - NET_RAW
        - SYS_ADMIN
        fsGroup:
          rule: RunAsAny
        hostNetwork: true
        hostPorts:
        - max: 7472
          min: 7472
        privileged: true
        runAsUser:
          rule: RunAsAny
        seLinux:
          rule: RunAsAny
        supplementalGroups:
          rule: RunAsAny
        volumes:
        - '*'

- name: create service account for controller
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        namespace: metallb-system
        name: controller
        labels:
          app: metallb

- name: create service account for speaker
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        namespace: metallb-system
        name: speaker
        labels:
          app: metallb

- name: create cluster role for controller
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: metallb-system:controller
        labels:
          app: metallb
      rules:
      - apiGroups: [""]
        resources: ["services"]
        verbs: ["get", "list", "watch", "update"]
      - apiGroups: [""]
        resources: ["services/status"]
        verbs: ["update"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create", "patch"]

- name: create cluster role for spaeker
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        name: metallb-system:speaker
        labels:
          app: metallb
      rules:
      - apiGroups: [""]
        resources: ["services", "endpoints", "nodes"]
        verbs: ["get", "list", "watch"]
      - apiGroups: [""]
        resources: ["events"]
        verbs: ["create", "patch"]
      - apiGroups: ["extensions"]
        resourcesNames: ["speaker"]
        resources: ["podsecuritypolicies"]
        verbs: ["use"]

- name: create role config-watcher
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: Role
      metadata:
        namespace: metallb-system
        name: config-watcher
        labels:
          app: metallb
      rules:
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get", "list", "watch"]

- name: create cluster role binding for controller
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        labels:
          app: metallb
        name: metallb-system:controller
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: metallb-system:controller
      subjects:
      - kind: ServiceAccount
        name: controller
        namespace: metallb-system

- name: create role cluster binding for speaker
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        labels:
          app: metallb
        name: metallb-system:speaker
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: metallb-system:speaker
      subjects:
      - kind: ServiceAccount
        name: speaker
        namespace: metallb-system

- name: create role binding for config-watcher
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: rbac.authorization.k8s.io/v1
      kind: RoleBinding
      metadata:
        labels:
          app: metallb
        name: config-watcher
        namespace: metallb-system
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: config-watcher
      subjects:
      - kind: ServiceAccount
        name: controller
      - kind: ServiceAccount
        name: speaker

- name: create configmap metallb
  k8s:
    definition:
      kind: ConfigMap
      metadata:
        namespace: metallb-system
        name: config
      data:
        config: |
          address-pools:
          - name: loadbalanced
            protocol: "{{ metallb_protocol }}"
            addresses:
            - "{{ metallb_ip_range }}"

- set_fact:
    selector: "{{ ( selector | default({})) | combine({ item }) "
  when: metallb_label_selector_enabled
  loop: "{{ metallb_label_selector }}"

- name: create daemonset for speaker
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: apps/v1beta2
      kind: DaemonSet
      metadata:
        namespace: metallb-system
        name: speaker
        labels:
          app: metallb
          component: speaker
      spec:
        selector:
          matchLabels:
            app: metallb
            component: speaker
        template:
          metadata:
            labels:
              app: metallb
              component: speaker
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "7472"
          spec:
            serviceAccountName: speaker
            terminationGracePeriodSeconds: 0
            hostNetwork: true
            nodeSelector: "{{ selector }}"
            tolerations:
            - effect: NoSchedule
              key: node-role.kubernetes.io/master
            containers:
            - name: speaker
              image: "metallb/speaker:v0.8.1"
              imagePullPolicy: IfNotPresent
              args:
              - --port=7472
              - --config=config
              env:
              - name: METALLB_NODE_NAME
                valueFrom:
                  fieldRef:
                    fieldPath: spec.nodeName
              - name: METALLB_HOST
                valueFrom:
                  fieldRef:
                    fieldPath: status.hostIP
              ports:
              - name: monitoring
                containerPort: 7472
              resources:
                limits:
                  cpu: "{{ metallb_limits_cpu }}"
                  memory: "{{ metallb_limits_memory }}"
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  add:
                  - NET_ADMIN
                  - NET_RAW
                  - SYS_ADMIN
                  drop:
                  - ALL
                readOnlyRootFilesystem: true
    
- name: create deployment for controller
  k8s:
    state: "{{ 'present' if metallb_enabled else 'absent' }}"
    definition:
      apiVersion: apps/v1beta2
      kind: Deployment
      metadata:
        namespace: metallb-system
        name: controller
        labels:
          app: metallb
          component: controller
      spec:
        revisionHistoryLimit: 3
        selector:
          matchLabels:
            app: metallb
            component: controller
        template:
          metadata:
            labels:
              app: metallb
              component: controller
            annotations:
              prometheus.io/scrape: "true"
              prometheus.io/port: "7472"
          spec:
            serviceAccountName: controller
            terminationGracePeriodSeconds: 0
            nodeSelector: "{{ selector }}"
            securityContext:
              runAsNonRoot: true
              runAsUser: 65534
            containers:
            - name: controller
              image: metallb/controller:v0.8.1
              imagePullPolicy: IfNotPresent
              args:
              - --port=7472
              - --config=config
              ports:
              - name: monitoring
                containerPort: 7472
              resources:
                limits:
                  cpu: "{{ metallb_limits_cpu }}"
                  memory: "{{ metallb_limits_memory }}"
              securityContext:
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - all
                readOnlyRootFilesystem: true